package com.futuretech.common.utils;

import android.content.Context;
import android.os.Build;
import android.provider.Settings.Secure;
import android.text.TextUtils;

import com.tencent.mmkv.MMKV;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.net.NetworkInterface;
import java.util.Collections;
import java.util.List;
import java.util.UUID;

/**
 * 生成Device ID的工具类。
 *
 * @author yong01.yin
 */
public class DeviceUuidFactory {
    private final String LOG_TAG = DeviceUuidFactory.class.getSimpleName();
    protected static final String PREFS_FILE = "device_uuid_file";
    protected static final String PREFS_VALUE_DEVICE_ID = "device_uuid";
    protected static final String PREFS_VALUE_MID = "device_mid";

//    protected volatile static String uuid = null;

//    public DeviceUuidFactory(Context context) {
//        mmkv = MMKV.mmkvWithID(PREFS_FILE);
//        synchronized (DeviceUuidFactory.class) {
//            if (TextUtils.isEmpty(uuid)) {
//                uuid = mmkv.decodeString(PREFS_VALUE_DEVICE_ID);
//
//                if (TextUtils.isEmpty(uuid)) {
//                    final String androidId = this.getAndroidId(context);
//                    final String imei = this.getImei(context);
//                    final String imsi = this.getImsi(context);
//
//                    String firstId = null;
//                    String secondId = null;
//                    if (!TextUtils.isEmpty(androidId)) {
//                        firstId = androidId;
//                    } else {
//                        if (!TextUtils.isEmpty(imsi)) {
//                            firstId = imsi;
//                        }
//                    }
//                    if (!TextUtils.isEmpty(imei)) {
//                        secondId = imei;
//                    } else {
//                        if (TextUtils.isEmpty(androidId)) {
//                            final String macAddr = this
//                                    .getWifiMacAddress(context);
//
//                            if (!TextUtils.isEmpty(macAddr)) {
//                                secondId = macAddr;
//                            }
//                        }
//                    }
//
//                    if (!TextUtils.isEmpty(firstId)
//                            || !TextUtils.isEmpty(secondId)) {
//                        String fullId = firstId + secondId;
//                        try {
//                            uuid = UUID.nameUUIDFromBytes(
//                                    fullId.getBytes("utf8")).toString();
//                        } catch (UnsupportedEncodingException e) {
//                            e.printStackTrace();
//                        }
//                    }
//
//                    if (TextUtils.isEmpty(uuid)) {
//                        Log.w(LOG_TAG,
//                                "Cannot find any unique ID for this device, try random ID...");
//                        uuid = UUID.randomUUID().toString();
//                    }
//                    mmkv.encode(PREFS_VALUE_DEVICE_ID, uuid);
//                }
//            }
//        }
//    }

    /**
     * Returns a unique UUID for the current android device. As with all UUIDs,
     * this unique ID is "very highly likely" to be unique across all Android
     * devices. Much more so than ANDROID_ID is.
     * <p>
     * The UUID is generated by using ANDROID_ID as the base key if appropriate,
     * falling back on TelephonyManager.getDeviceID() if ANDROID_ID is known to
     * be incorrect, and finally falling back on a random UUID that's persisted
     * to SharedPreferences if getDeviceID() does not return a usable value.
     * <p>
     * In some rare circumstances, this ID may change. In particular, if the
     * device is factory reset a new device ID may be generated. In addition, if
     * a user upgrades their phone from certain buggy implementations of Android
     * 2.2 to a newer, non-buggy version of Android, the device ID may change.
     * Or, if a user uninstalls your app on a device that has neither a proper
     * Android ID nor a Device ID, this ID may change on reinstallation.
     * <p>
     * Note that if the code falls back on using TelephonyManager.getDeviceId(),
     * the resulting ID will NOT change after a factory reset. Something to be
     * aware of.
     * <p>
     * Works around a bug in Android 2.2 for many devices when using ANDROID_ID
     * directly.
     *
     * @return a UUID that may be used to uniquely identify your device for most
     * purposes.
     */
//    public String getDeviceUuid() {
//        return uuid;
//    }

    private static String getAndroidId(Context context) {
        try {
            String androidId = Secure.getString(context.getContentResolver(),
                    Secure.ANDROID_ID);
            // A bug in Android 2.2 for many devices have the same id of
            // '9774d56d682e549c'
            if (!"9774d56d682e549c".equals(androidId)) {
                return androidId;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        return "";
    }

//    public static String getImei(Context context) {
//        try {
//            TelephonyManager tm = (TelephonyManager) context
//                    .getSystemService(Context.TELEPHONY_SERVICE);
//            String deviceId = tm.getDeviceId();
//            // The imei may be '000000000000000' when device is rooted or
//            // unlocked
//            if (!"000000000000000".equals(deviceId)) {
//                return deviceId;
//            }
//        } catch (Exception e) {
//            e.printStackTrace();
//        }
//
//        return "";
//    }
//
//    private String getImsi(Context context) {
//        try {
//            TelephonyManager tm = (TelephonyManager) context
//                    .getSystemService(Context.TELEPHONY_SERVICE);
//            return tm.getSubscriberId();
//        } catch (Exception e) {
//            e.printStackTrace();
//        }
//
//        return "";
//    }

//    public static String getWifiMacAddress(Context context) {
//        try {
//            WifiManager wm = (WifiManager) context.getSystemService("wifi");
//            WifiInfo wi = wm.getConnectionInfo();
//            return wi.getMacAddress();
//        } catch (Exception e) {
//            e.printStackTrace();
//        }
//        return "";
//    }

    /**
     * @param context
     * 手机唯一识别符
     * @return
     */
    private static String mid;

    public static String getMid(Context context) {
        if (TextUtils.isEmpty(mid)) {
            mid = MMKV.defaultMMKV().getString(PREFS_VALUE_MID, "");
            if (TextUtils.isEmpty(mid)) {
                mid = DeviceUuidFactory.getDeviceUuid(context);
                if (TextUtils.isEmpty(mid)) {
                    mid = UUID.randomUUID().toString();
                }
                MMKV.defaultMMKV().putString(PREFS_VALUE_MID, mid);
            }
        }
        return mid;
    }

    private static String getDeviceUuid(Context context) {
//        final String adId = getAdvertisingId(context);
        final String androidId = Secure.getString(context.getContentResolver(), Secure.ANDROID_ID);//if (!"9774d56d682e549c".equals(androidId)) {}
        final String hardwareInfo = Build.BOARD + Build.BRAND + Build.DEVICE + Build.DISPLAY
                + Build.HOST + Build.ID + Build.MANUFACTURER + Build.MODEL
                + Build.PRODUCT + Build.TAGS + Build.TYPE + Build.USER;


//        Log.d("Stefan", "adid: " + adId);
//        Log.d("Stefan", "androidId: " + androidId);
//        Log.d("Stefan", "hardwareInfo: " + hardwareInfo);
        UUID uuid = ((androidId == null || "9774d56d682e549c".equals(androidId)) ? strToUUID(hardwareInfo) : strToUUID(androidId));
//        Log.d("Stefan", "uuid: " + uuid);
        return uuid.toString();
    }

    private static UUID strToUUID(String str) {
        UUID uuid;
        try {
            uuid = UUID.nameUUIDFromBytes(str.getBytes("utf8"));
        } catch (Exception e) {
            uuid = UUID.randomUUID();
        }
        return uuid;
    }

//    private static String getAdvertisingId(Context context){
//        int gsmAvaliable = GoogleApiAvailabilityLight.getInstance().isGooglePlayServicesAvailable(context);
//        if (gsmAvaliable == ConnectionResult.SUCCESS) {
//            try {
//                String adId = AdvertisingIdClient.getAdvertisingIdInfo(context).getId();
//                return adId;
//            } catch (Exception e) {
//                e.printStackTrace();
//            }
//        }
//        return null;
//    }


//    /**
//     * 获取MAC地址
//     *
//     * @param context
//     * @return
//     */
//    private static String getMacAddress(Context context) {
//        String mac = "02:00:00:00:00:00";
//        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.M) {
//            mac = getMacDefault(context);
//        } else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && Build.VERSION.SDK_INT < Build.VERSION_CODES.N) {
//            mac = getMacFromFile();
//        } else if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
//            mac = getMacFromHardware();
//        }
//        return mac;
//    }

    /**
     * 遍历循环所有的网络接口，找到接口是 wlan0
     * 必须的权限 <uses-permission android:name="android.permission.INTERNET" />
     *
     * @return
     */
    private static String getMacFromHardware() {
        try {
            List<NetworkInterface> all = Collections.list(NetworkInterface.getNetworkInterfaces());
            for (NetworkInterface nif : all) {
                if (!nif.getName().equalsIgnoreCase("wlan0")) continue;

                byte[] macBytes = nif.getHardwareAddress();
                if (macBytes == null) {
                    return "";
                }

                StringBuilder res1 = new StringBuilder();
                for (byte b : macBytes) {
                    res1.append(String.format("%02X:", b));
                }

                if (res1.length() > 0) {
                    res1.deleteCharAt(res1.length() - 1);
                }
                return res1.toString();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return "02:00:00:00:00:00";
    }

    /**
     * Android 6.0（包括） - Android 7.0（不包括）
     *
     * @return
     */
    private static String getMacFromFile() {
        String WifiAddress = "02:00:00:00:00:00";
        try {
            WifiAddress = new BufferedReader(new FileReader(new File("/sys/class/net/wlan0/address"))).readLine();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return WifiAddress;
    }

//    /**
//     * Android  6.0 之前（不包括6.0）
//     * 必须的权限  <uses-permission android:name="android.permission.ACCESS_WIFI_STATE" />
//     *
//     * @param context
//     * @return
//     */
//    private static String getMacDefault(Context context) {
//        String mac = "02:00:00:00:00:00";
//        if (context == null) {
//            return mac;
//        }
//
//        WifiManager wifi = (WifiManager) context.getApplicationContext()
//                .getSystemService(Context.WIFI_SERVICE);
//        if (wifi == null) {
//            return mac;
//        }
//        WifiInfo info = null;
//        try {
//            info = wifi.getConnectionInfo();
//        } catch (Exception e) {
//        }
//        if (info == null) {
//            return null;
//        }
//        mac = info.getMacAddress();
//        if (!TextUtils.isEmpty(mac)) {
//            mac = mac.toUpperCase(Locale.ENGLISH);
//        }
//        return mac;
//    }

}
